import "core-js/es/promise";
import "core-js/es/string";
import "whatwg-fetch";
/** API test for 'Test', test RPC function */
export declare function Test_Test(): Promise<void>;
/** From this line on code has been modified. New code has been made following the one originally found at
https://github.com/SoftEtherVPN/SoftEtherVPN/blob/master/src/bin/hamcore/wwwroot/admin/default/src/ts/main.ts **/
export declare function ListVirtualHubs(id: string): Promise<void>;
export declare function ShowVpnServerInfo(idInfo: string, idStatus: string): Promise<void>;
export declare function CreateNewHub(hubName: string, idList: string, passwd: string): Promise<void>;
export declare function DeleteVirtualHub(queryString: string): Promise<void>;
export declare function HubAdminPage(queryString: string): Promise<void>;
export declare function HubPropertiesPage(queryString: string): Promise<void>;
export declare function ListUsers(queryString: string): Promise<void>;
export declare function FetchUser(queryString: string, name: string): Promise<void>;
export declare function ClearUser(): Promise<void>;
export declare function SaveUser(queryString: string, type: number, name: string, fname: string, note: string, gname: string, date: Date, authname: string, cert: string, cn: string, sn: string, password: string): Promise<void>;
export declare function CreateUser(queryString: string, user: string): Promise<void>;
export declare function UserInfo(queryString: string, user: string): Promise<void>;
export declare function DelUser(queryString: string, user: string): Promise<void>;
export declare function CertUser(queryString: string, user: string): Promise<void>;
export declare function PolicyONOFF(queryString: string, username: string): Promise<void>;
export declare function UserPolicyRules(queryString: string, username: string): Promise<void>;
export declare function SetPolicy(queryString: string, username: string): Promise<void>;
export declare function HubManagePage(queryString: string): Promise<void>;
export declare function HubManagePageStatus(queryString: string): Promise<void>;
export declare function EnumAccessLists(queryString: string): Promise<void>;
export declare function DeleteAccessItem(queryString: string, id: number): Promise<void>;
export declare function EnableDisableAccessRule(queryString: string, id: number, bool: number): Promise<void>;
export declare function CloneAccessRule(queryString: string, id: number): Promise<void>;
export declare function EditAccessRule(queryString: string, id: number): Promise<void>;
export declare function SetEditAccessRule(queryString: string, id: number): Promise<void>;
export declare function AddAccessRule(queryString: string, prio: number, id: number): Promise<void>;
export declare function HubPropertiesSet(queryString: string, passwd: string, on: boolean, maxs: number, noenum: boolean, type: number): Promise<void>;
export declare function ListListeners(id: string): Promise<void>;
export declare function CreateNewListener(lisPort: number, idLis: string): Promise<void>;
export declare function DeleteListener(lisPort: number, idLis: string): Promise<void>;
export declare function EnableListener(lisPort: number, idLis: string): Promise<void>;
export declare function DisableListener(lisPort: number, idLis: string): Promise<void>;
export declare function ListConnections(id: string): Promise<void>;
export declare function ConnectionInfo(connection: string): Promise<void>;
export declare function Disconnection(con: string, conList: string): Promise<void>;
export declare function HubOnline(hubName: string): Promise<void>;
export declare function HubOffline(hubName: string): Promise<void>;
export declare function ExtendedHubInfo(queryString: string): Promise<void>;
export declare function ExtendedHubInfoDescription(vhub: string, eo: string): Promise<void>;
export declare function ExtendedHubSet(vhub: string, name: string, value: number): Promise<void>;
export declare function AdminOptionsInfo(queryString: string): Promise<void>;
export declare function AdminOptionsInfoDescription(vhub: string, eo: string): Promise<void>;
export declare function AdminOptionsSet(vhub: string, name: string, value: number): Promise<void>;
export declare function EnumerateAc(queryString: string): Promise<void>;
export declare function SelectAc(queryString: string, id: number): Promise<void>;
export declare function SetAc(queryString: string, id: number, prio: number, deny: boolean, masked: boolean, ip: string, subnet: string): Promise<void>;
export declare function AddAc(queryString: string, id: number, prio: number): Promise<void>;
export declare function DelAc(queryString: string, id: number): Promise<void>;
export declare function MsgGet(queryString: string): Promise<void>;
export declare function MsgSet(queryString: string, msg: string): Promise<void>;
export declare function IPsecGet(): Promise<void>;
export declare function IPsecSet(secret: string, defhub: string): Promise<void>;
export declare function ipsecphGet(): Promise<void>;
export declare function ipsecphSetGet(inid: string): Promise<void>;
export declare function ipsecphClean(): Promise<void>;
export declare function ipsecphHub(): Promise<void>;
export declare function ipsecphN(): Promise<void>;
export declare function ipsecphE(id: string): Promise<void>;
export declare function ipsecphSet(inin: string, inid: string, hub: string, uname: string, password: string): Promise<void>;
export declare function ipsecphAdd(inid: string, hub: string, uname: string, password: string): Promise<void>;
export declare function ipsecphDel(inid: string): Promise<void>;
export declare function getOVPN(): Promise<void>;
export declare function setOVPN(ports: string): Promise<void>;
export declare function OVPNConfigFile(): Promise<void>;
export declare function ConfigFile(): Promise<void>;
export declare function UploadConfig(cfile: string): Promise<void>;
export declare function AzureGet(): Promise<void>;
export declare function AzureSet(bol: boolean): Promise<void>;
export declare function DynStatus(): Promise<void>;
export declare function GetDDNS(): Promise<void>;
export declare function ResDDNSH(): Promise<void>;
export declare function SetDDNSH(hostname: string): Promise<void>;
export declare function proxen(bool: boolean): Promise<void>;
export declare function DDNSPROXYget(): Promise<void>;
export declare function DDNSPROXYset(type: number, name: string, port: number, uname: string, passwd: string): Promise<void>;
//# sourceMappingURL=main.d.ts.map